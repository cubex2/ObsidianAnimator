buildscript {
    ext.kotlin_version = '1.2.51'

    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

configurations {
    embed
    compile.extendsFrom embed
}

apply plugin: 'kotlin'
apply plugin: 'forge'

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

subprojects {
    apply plugin: 'forge'
}

dependencies {
    //embed "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile project(':API')
    compile project(':Animator')
}

task eclipse(overwrite: true) {
    outputs.file "$projectDir/eclipse"

    def zipFile = file('tmp.zip')
    def url = new URL('https://github.com/DaBigJoe/ObsidianSuite/releases/download/v1.0/ObsidianSuiteEclipseFolder.zip')

    doFirst {
        if (!zipFile.exists()) {
            url.withInputStream { i -> zipFile.withOutputStream { it << i } }
        }

        copy {
            from zipTree(zipFile) into projectDir
        }

        mkdir "Animator/run"
    }

    doLast {
        delete zipFile
    }
}

def animatorProjects = [project(':API'), project(':Animator')]
animatorProjects.each { subproject -> evaluationDependsOn(subproject.path) }
task buildAnimatorWithAPI(type: Jar, dependsOn: animatorProjects.tasks["build"]) {
    baseName = 'ObsidianAnimator_v0.1.1'
    animatorProjects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}
